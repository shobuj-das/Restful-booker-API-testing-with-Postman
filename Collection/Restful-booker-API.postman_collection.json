{
	"info": {
		"_postman_id": "e5a16d2e-3027-433b-9df4-b90c93e7bcdd",
		"name": "Restful-booker-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34618466"
	},
	"item": [
		{
			"name": "Create a booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName=pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"//console.log(firstName)  \r",
							"pm.environment.set(\"firstName\", firstName)\r",
							"\r",
							"var lastName=pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"//console.log(lastName)  \r",
							"pm.environment.set(\"lastName\", lastName)\r",
							"\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"//console.log(totalPrice)\r",
							"pm.environment.set(\"totalPrice\", totalPrice)\r",
							"\r",
							"var depositPaid=pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositPaid\", depositPaid)\r",
							"\r",
							"// checkin\r",
							"var moment = require('moment');\r",
							"var momentObject = moment().subtract(2, 'days');\r",
							"var formattedMoment = momentObject.format(\"YYYY-MM-DD\");\r",
							"//console.log(formattedMoment);\r",
							"pm.environment.set(\"checkinTime\", formattedMoment);\r",
							"\r",
							"//pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
							"\r",
							"//checkout\r",
							"\r",
							"var moment = require('moment');\r",
							"var momentObject = moment().add(2, 'days');\r",
							"var formattedMoment = momentObject.format(\"YYYY-MM-DD\");\r",
							"//console.log(formattedMoment);\r",
							"pm.environment.set(\"checkoutTime\", formattedMoment);\r",
							"\r",
							"\r",
							"//additional needs\r",
							"\r",
							"function generateRandomString(length) {\r",
							"    var result = '';\r",
							"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    var charactersLength = characters.length;\r",
							"    for (var i = 0; i < length; i++) {\r",
							"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"var randomString = generateRandomString(10);\r",
							"//console.log(randomString);\r",
							"pm.environment.set(\"additionalNeeds\", randomString);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"bookingID\", jsonData.bookingid)\r",
							"\r",
							"pm.test(\"Verify satus code 201\", function () {\r",
							"    pm.expect(pm.response.to.have.status(201));\r",
							"});\r",
							"pm.test(\"Verify the status message Created\", function () {\r",
							"    pm.expect(pm.response.status).to.equal('Created');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : {{totalPrice}},\r\n\t\"depositpaid\" : {{depositPaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkinTime}}\",\r\n    \t\"checkout\" : \"{{checkoutTime}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code;\r",
							"switch(status_code){\r",
							"    case 200:\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Verify Status message is OK\", function(){\r",
							"            pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"        });\r",
							"        // ----------------------------------------------------------------------------\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.test(\"Verify First name\", function(){\r",
							"            pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"));\r",
							"        });\r",
							"        // ---------------------------------------------------------------------------\r",
							"        pm.test(\"Verify Last name\", function(){\r",
							"            pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"));\r",
							"        });\r",
							"        // ---------------------------------------------------------------------------\r",
							"        pm.test(\"Verify Total price\", function(){\r",
							"            var temp = pm.environment.get(\"totalPrice\");\r",
							"            totalPrice = parseInt(temp);\r",
							"            pm.expect(jsonData.totalprice).to.eql(totalPrice);\r",
							"        });\r",
							"        // ---------------------------------------------------------------------------\r",
							"        pm.test(\"Verify Deposit Paid\", function(){\r",
							"            var response_deposit_value = jsonData.depositpaid.toString();\r",
							"            var env_deposit_value = pm.environment.get(\"depositPaid\").toString();\r",
							"            pm.expect(response_deposit_value).to.eql(env_deposit_value);\r",
							"        });\r",
							"        // ---------------------------------------------------------------------------\r",
							"        pm.test(\"Verify checkin Time\", function(){\r",
							"            pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkinTime\"));\r",
							"        });\r",
							"        // ---------------------------------------------------------------------------\r",
							"        pm.test(\"Verify Checkout Time\", function(){\r",
							"            pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkoutTime\"));\r",
							"        });\r",
							"        break;\r",
							"    \r",
							"    case 404:\r",
							"        pm.test(\"Not Found ! \");\r",
							"        break;\r",
							"    \r",
							"    case 500:\r",
							"        pm.test(\"Server Error ! \");\r",
							"        break;\r",
							"\r",
							"    default:\r",
							"        pm.test(\"Something went wrong! \");\r",
							"        break;\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Authentication Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"//console.log(jsonData.token);\r",
							"pm.environment.set(\"authToken\",jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an iteam",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var updated_first_name = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set(\"updated_firstName\", updated_first_name);\r",
							"\r",
							"\r",
							"var updated_price = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"updated_price\", updated_price);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"console.log(statusCode);\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('firstname');\r",
							"    pm.expect(responseData).to.have.property('lastname');\r",
							"    pm.expect(responseData).to.have.property('totalprice');\r",
							"    pm.expect(responseData).to.have.property('depositpaid');\r",
							"    pm.expect(responseData).to.have.property('bookingdates');\r",
							"    pm.expect(responseData).to.have.property('additionalneeds');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Checkin and checkout dates are in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    pm.expect(responseData.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{updated_firstName}}\",\r\n    \"lastname\": \"Heaney\",\r\n    \"totalprice\": {{updated_price}},\r\n    \"depositpaid\": false,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-05-03\",\r\n        \"checkout\": \"2024-05-07\"\r\n    },\r\n    \"additionalneeds\": \"EKt3rztwbD\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check updated values",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var status_code = pm.response.code;\r",
							"//console.log(status_code)\r",
							"\r",
							"switch(status_code){\r",
							"    case 200:\r",
							"        pm.test(\"Verify Status code is 200\");\r",
							"        pm.test(\"Verify Status message is OK\", function(){\r",
							"            pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"        }); \r",
							"        \r",
							"        pm.test(\"Verify Updated First Name\", function(){\r",
							"            pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"updated_firstName\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Verify Updated Total Price\", function(){\r",
							"            pm.expect(jsonData.totalprice.toString()).to.eql(pm.environment.get(\"updated_price\"));\r",
							"        });\r",
							"        break;\r",
							"    \r",
							"    case 404:\r",
							"        pm.test(\"Not Found ! \");\r",
							"        break;\r",
							"    \r",
							"    case 500:\r",
							"        pm.test(\"Server Error !\");\r",
							"        break;\r",
							"\r",
							"    default:\r",
							"        pm.test(\"Something went wrong! \");\r",
							"        break;\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an iteam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check after deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// var status_code = pm.response.code;\r",
							"\r",
							"// console.log(status_code);\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Status message is Not Found\", function(){\r",
							"    pm.expect(pm.response.status).to.eql(\"Not Found\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				}
			},
			"response": []
		}
	]
}